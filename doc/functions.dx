'# Functions and function types

'Generally Dex functions are defined with the `def` keyword, for example

def square(x: Float) -> Float =
  x * x

square 5.0
> 25.

'The anatomy of a function definition is
```
def <name>(<explicit params>) -> [<effect>] <return type>
    [given (<implicit params>) [(<constraints>)]] =
  <body>
```

'The `name` can be any Dex identifier, though it is an error to
redefine a name already in the same scope (nested definitions
shadowing outer definitions is allowed).

'## Parameters

'Dex functions can have three kinds of parameters:
1. Explicit parameters, which are the normal kind of parameters the caller passes explicitly;
2. Implicit parameters, which the compiler fills in from context (like implicit parameters in Agda or Idris); and
3. Interface constraints, which the compiler synthesizes based on the
   defined instances (like typeclasses in Haskell).

'The interface constraints are also implicit in that the caller does
not explicitly supply them, but we distinguish them because they are
filled in by a different mechanism from the implicit parameters in
item (2).

'Here's an example of a definition that uses all three:

def average(xs: n=>Float) -> Float given (n:Type) (_:Ix n) =
  total = sum xs
  total / (n_to_f $ size n)

'This function depends on an implicitly-supplied type `n`, requires
the constraint `Ix n` (which it does not bind to a name), and accepts an explicit parameter
named `xs` of type `n=>Float` to produce a `Float` result.

'Every parameter is in scope for all the subsequent parameters' type
annotations, as well as the return type and the body.  (For purposes
of scoping, the `given` clause comes before the main declaration, but
it's syntactically later because it's usually less interesting.)  If
you're not familiar with other dependently-typed programming languages
this may seem strange, but it gives Dex a lot of its power.

'The set of each kind of parameter can be specified as a parenthesized
comma-separated list of `<name>:<type>` clauses.  Explicit parameters
go first, between the name and the arrow, since they are the most
important.  If there are implicit parameters, they go after the
`given` keyword.  If there are interface constraints too, they go in a
second parenthesized comma-separated list after the implicit
parameters.

'In addition, Dex has three short-hands for the common cases:
- The `:<type>` section for an explicit or implicit parameter can be
  omitted, in which case the type will be inferred.  This is most
  useful for implicit parameters, because they are often easily
  inferred to be of type `Type`.
- The `<name>:` for a constraint can be omitted, since they usually
  don't need to be referred to.
- An anonymous unary constraint applied to a parameter can be written by
  postfixing `|<Class name>` after the parameter (recursively).  For example,
  `given (n|Eq|Ord)` desugars to `given (n:_) (_:Eq n, _:Ord n)`
- The constraints section of a `given` clause can be omitted if it's
  empty, as can the whole `given` clause.  If you need a constraints
  section for `given`, you must include a section for implicit
  parameters, even if it's empty.

'An underscore `_` in place of a name means "accept this parameter but
do not name it".  An underscore `_` in place of a type means "infer
this type (if possible)".  We recommend always spelling out the types
of top-level definitions explicitly, but `_` is especially handy in
local contexts where the types are obvious and would only make the
program unnecessarily verbose.

'While it's certainly common for implicit parameters to be types
(i.e., have type `Type`), that's by no means required.  For example,
here is the same `average` function explicitly specialized to a `Fin`
index set of indeterminate size:

def fin_average(xs: (Fin n)=>Float) -> Float given (n:Nat)  =
  average xs

'The size `n` of the input `xs` can be inferred from the latter's full
type, so it doesn't need to be provided to the function explicitly.

'## Effects

'Dex has an effect system to keep track of what side-effects functions
may have.  This is key to automatic parallelization: a pure loop can
be parallelized with no communication, whereas one with unrestricted
side-effects must be run in series.

'A function's effects are specified in a special curly-braced block
prefixing the return type.  For example, here is an in-place integer
increment function using the assignment operator `:=` from the
Prelude:

def inc(ref:Ref h Int) -> {State h} () given (h)  =
  current = get ref
  ref := current + 1

'The effect-annotated return type, `{State h} ()`, tells Dex that
`inc` is not a pure function, but may have a side-effect before
returning a value of type `()`.  Specifically, the side effect is
`State h`, namely destructively updating references tagged with the
heap type `h`.  TODO([Issue
949](https://github.com/google-research/dex-lang/issues/949)):
Reference full explanation of effects.

'The full syntax of the effect specifier is
```
{<eff1>, <eff2>, ... | <name>}
```

'Each optional `<eff>` specifies one effect, which must be one of
- `State <name>`
- `Accum <name>`
- `Read <name>`
- `Except`
- `IO`

'The optional `| <name>` clause names all the remaining effects.  This
is useful for writing a higher-order function that accepts an
effectful function as an argument.  For example, we can write an
effect-polymorphic `map` function like this:

def my_map(f: (a) -> {|eff} b, xs:n=>a) -> {|eff} n=>b given (n|Ix, a, b, eff) =
  for i. f xs[i]

'If we had left off the `{|eff}` bit, our `map` function would only
work on pure functions.  As another example, `catch` from the
Prelude has this type:

def my_catch(f:() -> {Except|eff} a) -> {|eff} Maybe a given (a, eff) =
  catch f

'It accepts a function `f` that is permitted to have an
`Except` effect and an arbitrary set of other effects, and computes
its result, turning a thrown exception into a `Nothing` return value.
Any effects except `Except` remain to be discharged by the caller of
`catch`.

'The whole effect specifier can also be omitted, in which case the
function must be pure.

'## Calling functions

'Calling a function in
Dex is just writing its argument(s) after it in parentheses, so:
```
f(x, y)
```

'When calling a function, it is only necessary to supply the explicit
arguments, because both the implicit and constraint arguments are
filled in.  (Incidentally, the difference is in _how_ they are filled
in.  Implicit arguments are filled in by type unification, whereas
constraint arguments are filled in by locating or synthesizing the
appropriate instance.)  For example,

average([1., 2., 3.])
> 2.

'Here, the index set type `n` is inferred to be `Fin 3` from the type
of the argument, and then the `Ix` constraint is satisfied by the
instance for `Ix (Fin n)` instantiated at `n = 3`.

'Because programmers apply function to arguments all day, Dex offers a
few shortcuts.  First, borrowing from functional languages, you can
also call a function just by writing its argument expression next to
it:
```
f x y  is  f(x, y)
```

'Juxtaposition is the tightest-binding operator, so `f x + 1` parses
as `f(x) + 1`, not `f(x + 1)`.  A juxtaposition that occurs after any
function call syntax adds its argument at the end of the existing
argument list.  It also associates to the left, so all of these parse
the same:
```
f x y z  is  f(x) y z  is  f(x, y) z  is  f(x, y, z)
```

'This is particularly nice when the last argument is a long
expression, such as an inline function definition:
```
each(xs) \x.
  <do something>
  <do something else>
```
is the same as
```
each(xs, \x.
  <do something>
  <do something else>)
```
but you don't have to worry about the long-range close-paren.

'The tight binding of juxtaposition is not always convenient, so Dex
also borrows the `$` operator from Haskell.  This acts the same, but
has the loosest binding precedence and associates to the right.  Thus,
`f $ x + 1` is `f(x + 1)` and `f $ g $ h x` is `f(g(h x))`.

'Finally, to make it more convenient to write pipelines where the data
flows from left to right, Dex borrows the pipe `|` operator from Unix
shells.  Pipe makes the item on its left be the first argument of the
function application on its right.  So,
```
x | f            is  f(x)
x | f(y)         is  f(x, y)
x | f(y) | g(z)  is  g(f(x, y), z)
```

'As you can see, the `|` operator associates to chain applying functions, like `$`.
The `|` and `$` operators also stack:
```
x | f(y) $ z     is  f(x, y, z)
```

'### Underscore: Infer an explicit argument implicitly

'Sometimes, a required function argument can be successfully inferred.
In these cases one can write `_`, which means "fill this in by
unification" (the same as implicit parameters).  For example, the `@`
operator casts a number to an index set, and accepts the type to cast
to as an explicit argument.  However, when the index set of an array is
obvious, there is no need to spell it:

["foo", "bar"][(0@_)]
> "foo"

'### Supplying an implicit argument explicitly

'We can also supply an implicit argument explicitly, by writing `<parameter name>=`
in the application syntax:

from_ordinal(0, n=(Fin 2))
> 0

'Since the implicit arguments are passed by name, the order in which
they appear in the application syntax doesn't matter.

'## Standalone function types

'If you need to write the type of a function outside its definition,
just use the same arrow syntax:
```
(Float, Float) -> Float
```

'Naming the parameters in a type is not necessary unless the type
itself refers to the names, in which case you can use colons as usual.
For instance, the type of a function that accepts a size and an array
of that size looks like this:
```
(n:Nat, (Fin n) => Float) -> Float
```

'You can write implcit and class parameters in types by writing the
`given` clause inside the argument list:
```
(given (n:Nat), (Fin n) => Float) -> Float
```
Note that unlike with `def`, the `given` is not automatically floated
to the front, so scope usually makes one write it first.

'The effect specifier, as usual, is written in curly braces preceding the result type.

'TODO The printing of function types is a historical artifact.
Instead of generating a `given` clause, the printer writes implicit
arguments in curly braces, constraint arguments in square brackets,
and explicit arguments in parens, in their scope order.
 
'For instance, the type of our `average` function above prints like this:

:t average
> ({n:Type}[v#0:(Ix n)](xs:(n => Float32)) -> Float32)

'## Anonymous functions (lambda)

'The syntax for anonymous functions is
```
\ <parameters> . <body>
```
The `body` can but need not be a block.

'For example, `\a. a + 1` means "the add 1 function":

map (\a. a + 1) [1., 2., 3.]
> [2., 3., 4.]

'We can also explicitly type-annotate the arguments if we want.

map (\a:Float. a + 1) [1., 2., 3.]
> [2., 3., 4.]

'TODO How to specify implicit and constraint parameters?
