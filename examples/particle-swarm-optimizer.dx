'# Particle Swarm Optimizer

'## Fitness function

def rosenbrock(x:Float, y:Float) -> Float =
  sq (1.0 - x) + 80.0*sq (y - x*x)

'We write one that uses vector for input

def rosenbrock2(xs: (Fin 2)=>Float) -> Float =
  x = xs[from_ordinal 0]
  y = xs[from_ordinal 1]
  rosenbrock x y

'Min should be at 1.0, 1.0

:p rosenbrock 1.0 1.000
> 0.

:p rosenbrock2 [1.0, 1.000]
> 0.

:p rosenbrock 1.0 1.02
> 0.03199994

:p rosenbrock2 [1.0, 1.02]
> 0.03199994


'## Helper functions

def minbyfst(x:(Float, a), y:(Float, a)) -> (Float, a) given (a) = min_by fst x y
def minimumbyfst(xs:n=>(Float, a)) -> (Float, a) given (n|Ix, a|Data) = minimum_by fst xs

'### Rand helpers

'make a random vector uniformly distributed between `lb` and `ub`

def randBounded(k:Key, lb:d=>Float, ub:d=>Float) -> (d=>Float) given (d|Ix) =
  for i. lb[i] + ((rand $ ixkey k i) * (ub[i] - lb[i]))

:p randBounded (new_key 4) [1.0,  -2.0] [-1.0,  2.0]
> [-0.7370105, 1.433697]

'## The Optimizer itself.
We have **arguments**:
 - type explicit, `np:Ix`: number of particles
 - type explicit, `niter:Ix`: number of iterations
 - type: `d:Ix`: number of dimensions in the domain of `f`, i.e. the search space.
 - `f:(d=>Float)->Float`: loss function being minimized.
 - `(lb,ub):(d=>Float,d=>Float)`: boundries of the space being searched
 - `(momentum,gRate,pRate):(Float,Float,Float)`: PSO hyper-parameters to control exploration vs exploitation.

'**Returns**: the optimal point found with-in the bounds on the input domain of `f`.

def optimize(
    np':Nat,                      -- number of particles
    niter:Nat,                    -- number of iteration
    key:Key,                      -- random seed
    f:(d=>Float)->Float,          -- function to optimize
    bounds:(d=>Float, d=>Float),  -- bounds
    params:(Float, Float, Float)  -- momentum/pRate/gRate
    ) -> d=>Float given (d|Ix) =
    (lb,ub) = bounds
    (momentum, gRate, pRate) = params
    np = Fin np'
    optStep = \state.
        (keyL, gbest, pbests, positions, velocities) = state
        newPositions:(np=>d=>Float) = positions + velocities
        newPbests:(np=>(Float, d=>Float)) = for p.
            minbyfst pbests[p] (f newPositions[p], newPositions[p])
        newGbest:(Float, d=>Float) =
            minbyfst gbest (minimumbyfst newPbests)
        [keyG, keyP, keyNext] = split_key keyL
        (gscore, gloc) = gbest
        plocs = map snd pbests
        gVel:(np=>d=>Float) = for p i.
            weight = rand $ (ixkey keyG (p, i))
            dir = gloc[i] - positions[p,i]
            weight * dir
        pVel:(np=>d=>Float) = for p i.
            weight = rand $ (ixkey keyP (p, i))
            dir = plocs[p,i] - positions[p,i]
            weight * dir
        newVelocities:(np=>d=>Float) = momentum .* velocities + gRate .* gVel + pRate .* gVel
        (keyNext,newGbest,newPbests,newPositions,newVelocities)
    randInit1 = \keyI1. randBounded keyI1 lb ub
    randInit  = \keyI. for p:np. randInit1 $ ixkey keyI p
    [keyPos, keyVel, keyLoop] = split_key key
    initPositions:(np=>d=>Float) = randInit keyPos
    initVelocities:(np=>d=>Float) = randInit keyVel
    initPs:(np=>(Float, d=>Float)) = for p. (f initPositions[p], initPositions[p])
    initG:(Float, d=>Float) = minimumbyfst initPs
    inits = (keyLoop,initG,initPs,initPositions,initVelocities)
    res = fold inits (\iter:(Fin niter) s. optStep s)
    (dc0,(finalGscore, finalGloc),dc1,dc2,dc3) = res
    finalGloc

'---
Let's see how it goes.
Run it for more iterations and the result should improve.
Which it indeed does.

:p optimize 50 10 (new_key 0) rosenbrock2 ([-10.0, -10.0],[20.0, 20.0]) (0.5,0.3,0.4)
> [0.1914339, -0.03097725]

:p optimize 50 20 (new_key 0) rosenbrock2 ([-10.0, -10.0],[20.0, 20.0]) (0.5,0.3,0.4)
> [0.1914339, -0.03097725]

:p optimize 50 100 (new_key 0) rosenbrock2 ([-10.0, -10.0],[20.0, 20.0]) (0.5,0.3,0.4)
> [0.9940748, 0.989099]

:p optimize 50 1000 (new_key 0) rosenbrock2 ([-10.0, -10.0],[20.0, 20.0]) (0.5,0.3,0.4)
> [1., 1.]
