'For now, arithmetic is not sensitive to whitespace:

:p 1.0+1.0
> 2.

:p 1.0 +1.0
> 2.

:p 1.0+ 1.0
> 2.

:p 1.0 + 1.0
> 2.

:p 1.0-1.0
> 0.

:p 1.0 -1.0
> 0.

:p 1.0- 1.0
> 0.

:p 1.0 - 1.0
> 0.

'Applying a function to a negative literal thus requires parentheses.

f = \x. x + 10.

:p f -1.0   -- parses as (-) f (-1.0)
> Type error:
> Expected: ((x:Float32) -> Float32)
>   Actual: Float32
>
> :p f -1.0   -- parses as (-) f (-1.0)
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:p f (-1.0)
> 9.

:p (
    1
    +
    2
   )
> 3

:p
  xs = [1,2,3]
  for i.
    if xs[i] > 1
      then 0
      else 1
> [1, 0, 0]

:p
  run_state 5 \ref.
    n = get ref
    for_ i:(Fin n).
      ref := get ref + 1
> ((), 10)

-- Check that a syntax error in a funDefLet doesn't try to reparse the
-- whole definition as something it's not.
def frob(x:Int, y:Int) -> + =

> Parse error:66:29:
>    |
> 66 | def frob(x:Int, y:Int) -> + =
>    |                             ^
> unexpected '='
> expecting name or symbol name

-- Check that indented blocks have to actually be indented.
for i.
i

> Parse error:77:1:
>    |
> 77 | i
>    | ^
> expecting end of line or space

def (foo + bar) : Int = 6

> Parse error:85:6:
>    |
> 85 | def (foo + bar) : Int = 6
>    |      ^
> unexpected 'f'
> expecting symbol name

'Data definitions allow but do not require type / kind annotations

data MyPair1(a, b) = MkPair1(a, b)

data MyPair2(a:Type, b:Type) = MkPair2(x:a, y:b)

'Data definitions allow interleaving arguments and class constraints
(regression test for Issue 1015)

data TableInType(n|Ix, a, table:(n=>a)) =
  MkTableInType              -- Doesn't store any data except in the type!

'Left arrow <- desugars to a continuation lambda
(feature test for Issue 1137)

:p
  x <- with_state 0
  x := 4
  get x
> 4

'Check that we get reasonably helpful error messages if we try to write param lists
without parens or with whitespace before the parens.


data MyMaybe a =
  MyNothing

> Parse error:119:14:
>     |
> 119 | data MyMaybe a =
>     |              ^
> unexpected 'a'
> expecting '=' or parameter list in parentheses (without preceding whitespace)
data MyMaybe (a) =
  MyNothing

> Parse error:128:14:
>     |
> 128 | data MyMaybe (a) =
>     |              ^
> unexpected '('
> expecting '=' or parameter list in parentheses (without preceding whitespace)
data MyMaybe(a) =
  MyNothing
  MyJust a

> Parse error:139:10:
>     |
> 139 |   MyJust a
>     |          ^^
> unexpected "a<newline>"
> expecting end of input, end of line, or optional parameter list
data MyMaybe(a) =
  MyNothing
  MyJust (a)

> Parse error:149:10:
>     |
> 149 |   MyJust (a)
>     |          ^^
> unexpected "(a"
> expecting end of input, end of line, or optional parameter list
interface MyClass a
  pass

> Parse error:157:19:
>     |
> 157 | interface MyClass a
>     |                   ^
> expecting parameter list in parentheses (without preceding whitespace)
instance MyClass Int
  pass

> Parse error:165:18:
>     |
> 165 | instance MyClass Int
>     |                  ^
> expecting '(' (without preceding whitespace)
instance MyClass (Int)
  pass

> Parse error:173:18:
>     |
> 173 | instance MyClass (Int)
>     |                  ^
> expecting '(' (without preceding whitespace)
def myFunction (x) = ()

> Parse error:181:16:
>     |
> 181 | def myFunction (x) = ()
>     |                ^
> expecting parameter list in parentheses (without preceding whitespace)

def myFunction x = ()

> Parse error:189:16:
>     |
> 189 | def myFunction x = ()
>     |                ^
> expecting parameter list in parentheses (without preceding whitespace)

