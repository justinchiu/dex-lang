

def checkFloatInUnitInterval(x:Float) -> {Except} Float =
  assert $ x >= 0.0
  assert $ x <= 1.0
  x

:p catch \. assert False
> Nothing

:p catch \. assert True
> (Just ())

:p catch \. checkFloatInUnitInterval 1.2
> Nothing

:p catch \. checkFloatInUnitInterval (-1.2)
> Nothing

:p catch \. checkFloatInUnitInterval 0.2
> (Just 0.2)

:p yield_state 0 \ref.
     catch \.
       ref := 1
       assert False
       ref := 2
> 1

:p catch \.
  for i:(Fin 5).
    if ordinal i > 3
      then throw()
      else 23
> Nothing

:p catch \.
  for i:(Fin 3).
    if ordinal i > 3
      then throw()
      else 23
> (Just [23, 23, 23])

-- Is this the result we want?
:p yield_state zero \ref.
     catch \.
       for i:(Fin 6).
         if (ordinal i `rem` 2) == 0
           then throw()
           else ()
         ref!i := 1
> [0, 1, 0, 1, 0, 1]

:p catch \.
     run_state 0 \ref.
       ref := 1
       assert False
       ref := 2
> Nothing

-- https://github.com/google-research/dex-lang/issues/612
def sashabug(h: ()) -> {Except} List Int =
  yield_state mempty \results.
      results := (get results) <> AsList 1 [2]

catch \. (catch \. sashabug ())
> (Just (Just (AsList 1 [2])))
