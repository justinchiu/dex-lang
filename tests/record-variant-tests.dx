
'Basics:
Syntax for records, variants, and their types.

'Record types

:p {&}
> {&}

:p {a:Int & b:Float}
> {a: Int32 & b: Float32}

:p {a:Int & b:Float &}
> {a: Int32 & b: Float32}

:p {a:Int & a:Float}
> {a: Int32 & a: Float32}


'Records

:p {}
> {}
:t {}
> {&}

:p {,}
> {}
:t {,}
> {&}

:p {a=3, b=4}
> {a = 3, b = 4}
:t {a=3, b=4}
> {a: Nat & b: Nat}

:p {a=3, b=4,}
> {a = 3, b = 4}
:t {a=3, b=4,}
> {a: Nat & b: Nat}

:p {a=3, a=4}
> {a = 3, a = 4}
:t {a=3, a=4}
> {a: Nat & a: Nat}

:p
  x = {a=5.0, b=2}
  y : {a:Int & b:Int & ...} = {a=3, a=4, ...x}
  y
> {a = 3, a = 4, a = 5., b = 2}

:p
  {b=b1, a=a1, c=c1, a=a2} = {a=1, a=2, b=3, c=4}
  (a1, a2, b1, c1)
> (1, (2, (3, 4)))

'Parse errors

:p {a:Int,}
> Syntax error: Bad field spec.  Expected an explicit field `label = expr`, a remaining fields expression `... expr`, or a label-field pun `label`.
>
> :p {a:Int,}
>     ^^^^^


'Unpacking


:p
  ({b=b, a=a1, a=a2}) = {a=1, b=2, a=3}
  (a1, a2, b)
> (1, (3, 2))

({b=b, a=a1, a=a2}) = {a=1, b=2, a=3}
:p (a1, a2, b)
> (1, (3, 2))

:p
  ({foo=foo, ...}) = {foo=1, bar=2, baz=3}
  foo
> 1

({foo=foo, ...}) = {foo=1, bar=2, baz=3}
:p foo
> 1

def getFoo {a} {rest : Fields} (x : {foo:a & ...rest}) : a =
  ({foo=foo, ...}) = x
  foo

:p getFoo {foo=1, foo=0.0, bar=2, baz=3}
> 1

def getTwoFoosAndABar {a b c} {rest : Fields}
                      (x : {foo:a & foo:b & bar:c & ...rest}) : (a&b&c) =
  ({foo=f1, foo=f2, bar=b, ...}) = x
  (f1, f2, b)

:p getTwoFoosAndABar {foo=1, bar=2, foo=0.0, foo=4, baz=3.0, bar=7}
> (1, (0., 2))

:p
  ({b=b, a=a1, a=a2}) = {a=1, b=2}
  (a1, a2, b)
> Type error:
> Expected: {a: c & a: d & b: e}
>   Actual: {a: b & b: a}
> (Solving for: [a, b, c, d, e])
>
>   ({b=b, a=a1, a=a2}) = {a=1, b=2}
>    ^^^^^^^^^^^^^^^^^


'Record puns

:p
  foo = 1
  bar = 2.0
  {foo, bar}
> {bar = 2., foo = 1}

:p
  ({foo, ...}) = {foo=1, bar=2.0}
  foo
> 1


'Pattern matching

-- Not allowed: use a let binding instead
:p case {a=1, b=2, a=3} of
  {b=b, a=a1, a=a2} -> (a1, a2, b)
> Type error:Case patterns must start with a data constructor or variant pattern
>
>   {b=b, a=a1, a=a2} -> (a1, a2, b)
>   ^^^^^^^^^^^^^^^^^^


'Table values and imp lowering

myRecordTable : (Fin 2)=>{a:Int & b:Float} =
  [{a=1, b=2.0}, {a=3, b=4.0}]

:p myRecordTable
> [{a = 1, b = 2.}, {a = 3, b = 4.}]

:p for i:(Fin 2).
    ({a=a, b=b}) = myRecordTable.i
    {a=b, b=a}
> [{a = 2., b = 1}, {a = 4., b = 3}]

-- === First-class labels ===

abc : Label = ##abc
:t abc
> Label

q = {@abc=1, y=2}
q
> {abc = 1, y = 2}
:t q
> {abc: Nat & y: Nat}

:p
  {@abc=xv, y=yv} = q
  (xv, yv)
> (1, 2)

def projectField {r t} (l: Label) (x: {@l:t & ...r}) : t =
  {@l=v, ...} = x
  v

projectField ##a {a=1, b=2}
> 1

def addField {r1 r2} (l: Label) (x: {@l:Int & ...r1}) (y: {@l:Int & ...r2}) : Int =
  {@l=v1, ...} = x
  {@l=v2, ...} = y
  v1 + v2

addField ##b {a=1, b=2} {b=2, c=4}
> 4

def badProject (l: Label) (x: {@l:Int & l:Float}) : Float =
  {l=lv, ...} = x
  lv
> Type error:
> Expected: {l: a & ...b}
>   Actual: {@l: Int32 & l: Float32}
> (Solving for: [a, b])
>
>   {l=lv, ...} = x
>   ^^^^^^^^^^^^

def concatRecords {f f'} (x: {& ...f}) (y: {& ...f'}) : ({...f & ...f'}) =
  {...x, ...y}

concatRecords {a=1} {b=2}
> {a = 1, b = 2}

def projectTwo {f a b} (l1: Label) (l2: Label) (x: {@l1:a & @l2:b & ...f}) : (a & b) =
  {@l1=v1, @l2=v2, ...} = x
  (v1, v2)

projectTwo ##a ##b {c=1, b=2, a=4}
> (4, 2)

def subsetRecord (f: Fields) {f'} (x: {...f & ...f'}) : ({& ...f}) =
  {@...f=v, ...} = x
  v

subsetRecord {a: _ ? c: _} {a=1, b=2, c=4}
> {a = 1, c = 4}

subsetRecord {? c: _ ?} {a=1, b=2}
> Type error:
> Expected: {c: a & ...b}
>   Actual: {a: d & b: c}
> (Solving for: [a, b, c, d])
>
> subsetRecord {? c: _ ?} {a=1, b=2}
>                         ^^^^^^^^^^
