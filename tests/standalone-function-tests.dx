
@noinline
def standalone_sum {n v} [Add v] (xs:n=>v) : v =
  sum xs

vec3 = [1,2,3]
vec2 = [4,5]

-- TODO: test that we only get one copy inlined (hard to without dumping IR
-- until we have logging for that sort of thing)
:p standalone_sum vec2 + standalone_sum vec3
> 15

mat23 = [[1,2,3],[4,5,6]]
mat32 = [[1,2],[3,4],[5,6]]

@noinline
def standalone_transpose {n m a} (x:n=>m=>a) : m=>n=>a =
  for i j. x.j.i

:p (standalone_transpose mat23, standalone_transpose mat32)
> ([[1, 4], [2, 5], [3, 6]], [[1, 3, 5], [2, 4, 6]])

xs = [1,2,3]

@noinline
def foo (_:Unit) : Nat = sum xs

foo ()
> 6

'Regression test for #1152.  The standalone function is just here to
make the size of the tables unknown.  The actual bug is in Alegbra
handling an expression like `sum_{i=0}^k k * i` where the same
name occurs in the monomial and the limit.

def LowerTriMat (n:Type) [Ix n] (v:Type) : Type = (i:n)=>(..i)=>v
def UpperTriMat (n:Type) [Ix n] (v:Type) : Type = (i:n)=>(i..)=>v

@noinline
def bar (n : Nat) : Float =
  (for k. for j:(..k). 0.0, for k. for j:(k..). 0.0) :: (LowerTriMat (Fin n) Float & UpperTriMat (Fin n) Float)
  0.0

bar 2
> 0.
