'# Sets and Set-Indexed Arrays

import sort

'## Monoidal enforcement of uniqueness in sorted lists

def last {n a} (xs:n=>a) : Maybe a =
  s = size n
  case s == 0 of
    True -> Nothing
    False -> Just xs.(unsafe_from_ordinal n (unsafe_nat_diff s 1))

def first {n a} (xs:n=>a) : Maybe a =
  s = size n
  case s == 0 of
    True -> Nothing
    False -> Just xs.(unsafe_from_ordinal n 0)

def all_except_last {n a} (xs:n=>a) : List a =
  shortSize = Fin (size n -| 1)
  allButLast = for i:shortSize. xs.(unsafe_from_ordinal _ (ordinal i))
  (AsList _ allButLast)

def merge_unique_sorted_lists {a} [Eq a] (xlist:List a) (ylist:List a) : List a =
  -- This function is associative, for use in a monoidal reduction.
  -- Assumes all xs are <= all ys.
  -- The element at the end of xs might equal the
  -- element at the beginning of ys.  If so, this
  -- function removes the duplicate when concatenating the lists.
  (AsList nx xs) = xlist
  (AsList _  ys) = ylist
  case last xs of
    Nothing -> ylist
    Just last_x -> case first ys of
      Nothing -> xlist
      Just first_y -> case last_x == first_y of
        False -> concat [xlist,            ylist]
        True ->  concat [all_except_last xs, ylist]

def remove_duplicates_from_sorted {n a} [Eq a] (xs:n=>a) : List a =
  xlists = for i:n. (AsList 1 [xs.i])
  reduce (AsList 0 []) merge_unique_sorted_lists xlists


'## Sets

data Set a [Ord a] =
  -- Guaranteed to be in sorted order with unique elements,
  -- as long as no one else uses this constructor.
  -- Instead use the "toSet" function below.
  UnsafeAsSet n:Nat elements:(Fin n => a)

def to_set {n a} [Ord a] (xs:n=>a) : Set a =
  sorted_xs = sort xs
  (AsList n' sorted_unique_xs) = remove_duplicates_from_sorted sorted_xs
  UnsafeAsSet n' sorted_unique_xs

def set_size {a} ((UnsafeAsSet n _):Set a) : Nat = n

instance Eq (Set a) given {a} [Eq a]
  (==) = \(UnsafeAsSet _ xs) (UnsafeAsSet _ ys).
    (AsList _ xs) == (AsList _ ys)

def set_union {a}
      ((UnsafeAsSet nx xs):Set a)
      ((UnsafeAsSet ny ys):Set a) : Set a =
  combined = merge_sorted_tables xs ys
  (AsList n' sorted_unique_xs) = remove_duplicates_from_sorted combined
  UnsafeAsSet _ sorted_unique_xs

def set_intersect {a}
      ((UnsafeAsSet nx xs):Set a)
      ((UnsafeAsSet ny ys):Set a) : Set a =
  -- This could be done in O(nx + ny) instead of O(nx log ny).
  isInYs = \x. case search_sorted ys x of
    Just x -> True
    Nothing -> False
  (AsList n' intersection) = filter isInYs xs
  UnsafeAsSet _ intersection


'## Sets as a type, whose inhabitants can index arrays

-- TODO Implicit arguments to data definitions
-- (Probably `a` should be implicit)
data Element a:Type [Ord a] set:(Set a) = UnsafeElement Nat

-- TODO The set argument could be implicit (inferred from the Element
-- type), but maybe it's easier to read if it's explicit.
def member {a} (x:a) (set:(Set a)) : Maybe (Element a set) =
  (UnsafeAsSet _ elts) = set
  case search_sorted elts x of
    Just n -> Just $ UnsafeElement $ ordinal n
    Nothing -> Nothing

def value {a} {set:(Set a)} (x:Element a set) : a =
  (UnsafeAsSet _ elts) = set
  UnsafeElement ix = x
  elts.(unsafe_from_ordinal _ ix)

instance Ix (Element a set) given {a} {set:(Set a)}
  size = set_size set
  ordinal = \(UnsafeElement n). n
  unsafe_from_ordinal = \n. UnsafeElement n

instance Eq (Element a set) given {a} {set:(Set a)}
  (==) = \ix1 ix2. ordinal ix1 == ordinal ix2

instance Ord (Element a set) given {a} {set:(Set a)}
  (<) = \ix1 ix2. ordinal ix1 < ordinal ix2
  (>) = \ix1 ix2. ordinal ix1 > ordinal ix2
